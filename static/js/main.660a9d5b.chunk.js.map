{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","images/Academy-Weather-bg160.svg","components/InfoBlock/InfoBlock.tsx","components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchForecast/SearchForecast.tsx","components/Main/Main.tsx","utils/WeatherApi.ts","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Footer","InfoBlock","src","cloudImage","alt","Card","props","temperatureCard","card","temperature","String","style","backgroundImage","iconUrl","backgroundSize","forecast","date","CardList","currentWidth","window","innerWidth","type","isLeftButtonEnabled","onClick","handleButtonLeft","disabled","cards","map","i","slice","numberOfInitalCard","length","isRightButtonEnabled","handleButtonRight","SearchForecast","useState","city","setCity","setDate","form","React","createRef","ref","name","onKeyPress","event","key","getWeatherForecastOnSevenDays","newDate","Date","dateInThePast","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getHistoricalWeatherData","required","onChange","target","value","console","log","hidden","selected","placeholder","isFormSevenDaysSubmited","isFormHistoryDaySubmited","Main","cardsSevenDays","cardDayInPast","apiKey","handleResponse","res","ok","json","Promise","reject","status","apiWeather","url","headers","_url","_headers","this","coordinates","fetch","lat","lon","method","then","authorization","App","setCardsSevenDays","setCardDayInPast","setNumberOfInitalCard","setIsRightButtonEnabled","setIsLeftButtonEnabled","setIsFormSevenDaysSubmited","setIsFormHistoryDaySubmited","getCoordinates","cordinates","optionsData","day","month","year","createCard","toLocaleDateString","toLowerCase","Math","round","useEffect","cordinatesCity","data","newCards","daily","item","dt","temp","weather","icon","catch","err","coordinatesCity","getWeatherForecastOnDateinThePast","newCard","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.660a9d5b.chunk.js","sourcesContent":["import './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n      <header className=\"header\">\r\n        <h1 className=\"header__title\">Weather<br/><span className=\"header__title-part\">forecast</span></h1>\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n      <footer className=\"footer\">\r\n        <p className=\"footer__discription\">C Любовью от Mercury Development</p>\r\n      </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/Academy-Weather-bg160.1a743710.svg\";","import \"./InfoBlock.css\";\r\nimport cloudImage from \"../../images/Academy-Weather-bg160.svg\";\r\n\r\nfunction InfoBlock() {\r\n  return (\r\n    <div className=\"info\">\r\n      <img\r\n        src={cloudImage}\r\n        alt=\"Облако\"\r\n        className=\"info__image\"\r\n      />\r\n      <p className=\"info__description\">\r\n        Fill in all the fields and the weather will be displayed\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoBlock;","import './Card.css';\r\nimport { CardItem } from '../../types';\r\n\r\ninterface CardProps {\r\n    key: number,\r\n    card: CardItem,\r\n    forecast: string,\r\n}\r\n\r\nfunction Card(props: CardProps) {\r\n    let temperatureCard: string;\r\n    if (props.card.temperature > 0) {\r\n        temperatureCard = \"+\" + props.card.temperature;\r\n    } else  if (props.card.temperature < 0) {\r\n        temperatureCard = \"-\" + props.card.temperature;\r\n    } else {\r\n        temperatureCard = String(props.card.temperature);\r\n    }\r\n    \r\n    return (\r\n        <li className=\"cards__item\" style={ {backgroundImage: `url(${props.card.iconUrl})`, backgroundSize: props.forecast === '7days' ? '120px 120px' : '160px 160px'}}>\r\n            <p className=\"cards__date\">{props.card.date}</p>\r\n            <p className=\"cards__temperature\">{temperatureCard!}&deg;</p>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Card;","import \"./CardList.css\";\r\nimport Card from \"../Card/Card\";\r\nimport { Cards } from \"../../types\";\r\n\r\ninterface CardListProps {\r\n  cards: Cards;\r\n  forecast: string;\r\n  handleButtonRight?(): void;\r\n  handleButtonLeft?(): void;\r\n  numberOfInitalCard?: number;\r\n  isLeftButtonEnabled?: boolean;\r\n  isRightButtonEnabled?: boolean;\r\n}\r\n\r\nfunction CardList(props: CardListProps) {\r\n\r\n  let currentWidth: any = window.innerWidth;\r\n\r\n  return (\r\n    <div className=\"card-list-block\">\r\n      {props.forecast === \"7days\" && (\r\n        <button\r\n          type=\"button\"\r\n          className={`card-list-block__button ${\r\n            props.isLeftButtonEnabled ? \"\" : \"card-list-block__button_disabled\"\r\n          } card-list-block__button_direction_left`}\r\n          onClick={props.handleButtonLeft}\r\n          disabled={!props.isLeftButtonEnabled}\r\n        ></button>\r\n      )}\r\n      <ul className=\"cards\">\r\n        {props.cards\r\n          .map((card, i) => (\r\n            <Card key={i} card={card} forecast={props.forecast} />\r\n          ))\r\n          .slice(props.numberOfInitalCard, props.forecast==='day' ? 1 : currentWidth <= 540 ? props.cards.length : props.numberOfInitalCard! + 3)}\r\n      </ul>\r\n      {props.forecast === \"7days\" && (\r\n        <button\r\n          type=\"button\"\r\n          className={`card-list-block__button ${\r\n            props.isRightButtonEnabled ? \"\" : \"card-list-block__button_disabled\"\r\n          } card-list-block__button_direction_right`}\r\n          onClick={props.handleButtonRight}\r\n          disabled={!props.isRightButtonEnabled}\r\n        ></button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import \"./SearchForecast.css\";\r\nimport React, { useState } from \"react\";\r\nimport InfoBlock from \"../InfoBlock/InfoBlock\";\r\nimport CardList from \"../CardList/CardList\";\r\nimport { Cards } from \"../../types\";\r\n\r\ninterface SearchForecastProps {\r\n  forecast: string;\r\n  cards: Cards;\r\n  getWeatherForecastOnSevenDays?(city: string): void;\r\n  handleButtonRight?(): void;\r\n  handleButtonLeft?(): void;\r\n  numberOfInitalCard?: number;\r\n  isLeftButtonEnabled?: boolean;\r\n  isRightButtonEnabled?: boolean;\r\n  getHistoricalWeatherData?(city: string, date: number): void;\r\n  isFormSevenDaysSubmited?: boolean;\r\n  isFormHistoryDaySubmited?: boolean;\r\n}\r\n\r\nfunction SearchForecast(props: SearchForecastProps) {\r\n  const [city, setCity] = useState<string>(\"\");\r\n  const [date, setDate] = useState<string>(\"\");\r\n  const form = React.createRef<HTMLFormElement>();\r\n\r\n  function handleChangeSelect(\r\n    event: React.ChangeEvent<HTMLSelectElement>\r\n  ): void {\r\n    setCity(event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  function handleChangeDate(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    setDate(event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  function handleKeyEnter(event: React.KeyboardEvent): void {\r\n    if (event.key === \"Enter\") {\r\n      if (props.forecast === \"7days\" && city !== \"\") {\r\n        props.getWeatherForecastOnSevenDays!(city);\r\n      } else if (city !== \"\" && date !== \"\") {\r\n        const newDate = new Date(date);\r\n        const dateInThePast =\r\n          Date.UTC(\r\n            newDate.getUTCFullYear(),\r\n            newDate.getUTCMonth(),\r\n            newDate.getUTCDate(),\r\n            newDate.getUTCHours(),\r\n            newDate.getUTCMinutes(),\r\n            newDate.getUTCSeconds()\r\n          ) / 1000;\r\n        props.getHistoricalWeatherData!(city, dateInThePast);\r\n      }\r\n    }\r\n  }\r\n\r\n  // useEffect(():void => {\r\n  //     if (city !== '' && date !== '' && form !== null) {\r\n  //         //ф-ция вызывающая api\r\n  //         console.log(city, date);\r\n  //     } else  if (forecast === '7days' && city !== '') {\r\n  //ф-ция вызывающая api\r\n  //     }\r\n  // }, [city, date, form, forecast]);\r\n\r\n  // const onFocus = () => {\r\n  //     this.type=\"date\";\r\n  // }\r\n\r\n  return (\r\n    <div className=\"forecast\">\r\n      <h3 className=\"forecast__title\">\r\n        {props.forecast === \"7days\"\r\n          ? \"7 Days Forecast\"\r\n          : \"Forecast for a Date in the Past\"}\r\n      </h3>\r\n      <form\r\n        ref={form}\r\n        className=\"forecast__form\"\r\n        name={props.forecast}\r\n        onKeyPress={handleKeyEnter}\r\n      >\r\n        <select\r\n          className=\"forecast__input\"\r\n          required\r\n          onChange={handleChangeSelect}\r\n        >\r\n          <option hidden disabled selected>\r\n            Select city\r\n          </option>\r\n          <option className=\"forecast__select-item\">Самара</option>\r\n          <option className=\"forecast__select-item\">Тольятти</option>\r\n          <option className=\"forecast__select-item\">Саратов</option>\r\n          <option className=\"forecast__select-item\">Казань</option>\r\n          <option className=\"forecast__select-item\">Краснодар</option>\r\n        </select>\r\n        {props.forecast === \"day\" && (\r\n          <input\r\n            type=\"date\"\r\n            className=\"forecast__input forecast__input_type_data\"\r\n            placeholder=\"Select date\"\r\n            required\r\n            onChange={handleChangeDate}\r\n          ></input>\r\n        )}\r\n      </form>\r\n      {((props.forecast === \"7days\" && !props.isFormSevenDaysSubmited) ||\r\n        (props.forecast === \"day\" && !props.isFormHistoryDaySubmited)) && (\r\n        <InfoBlock />\r\n      )}\r\n      {((props.forecast === \"7days\" && props.isFormSevenDaysSubmited) ||\r\n        (props.forecast === \"day\" && props.isFormHistoryDaySubmited)) && (\r\n        <CardList\r\n          cards={props.cards}\r\n          forecast={props.forecast}\r\n          handleButtonRight={props.handleButtonRight}\r\n          handleButtonLeft={props.handleButtonLeft}\r\n          numberOfInitalCard={props.numberOfInitalCard}\r\n          isLeftButtonEnabled={props.isLeftButtonEnabled}\r\n          isRightButtonEnabled={props.isRightButtonEnabled}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchForecast;\r\n","import \"./Main.css\";\r\nimport SearchForecast from \"../SearchForecast/SearchForecast\";\r\nimport { Cards } from \"../../types\";\r\n\r\ntype MainProps = {\r\n  cardsSevenDays: Cards;\r\n  cardDayInPast: Cards;\r\n  getWeatherForecastOnSevenDays(city: string): void;\r\n  handleButtonRight(): void;\r\n  handleButtonLeft(): void;\r\n  numberOfInitalCard: number;\r\n  isLeftButtonEnabled: boolean;\r\n  isRightButtonEnabled: boolean;\r\n  getHistoricalWeatherData(city: string, date: number): void;\r\n  isFormSevenDaysSubmited: boolean;\r\n  isFormHistoryDaySubmited: boolean;\r\n};\r\n\r\nfunction Main(props: MainProps) {\r\n  return (\r\n    <main className=\"main\">\r\n      <SearchForecast\r\n        forecast=\"7days\"\r\n        cards={props.cardsSevenDays}\r\n        getWeatherForecastOnSevenDays={props.getWeatherForecastOnSevenDays}\r\n        handleButtonRight={props.handleButtonRight}\r\n        handleButtonLeft={props.handleButtonLeft}\r\n        numberOfInitalCard={props.numberOfInitalCard}\r\n        isLeftButtonEnabled={props.isLeftButtonEnabled}\r\n        isRightButtonEnabled={props.isRightButtonEnabled}\r\n        isFormSevenDaysSubmited={props.isFormSevenDaysSubmited}\r\n      />\r\n      <SearchForecast\r\n        forecast=\"day\"\r\n        cards={props.cardDayInPast}\r\n        getHistoricalWeatherData={props.getHistoricalWeatherData}\r\n        isFormHistoryDaySubmited={props.isFormHistoryDaySubmited}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import { Coordinates } from '../types';\r\n\r\nconst apiKey: string = \"4a12c294eb4c1a76d3ce99b78c9b8b4a\";\r\nconst BASE_URL: string = \"https://api.openweathermap.org/data/2.5/onecall\";\r\n\r\ntype Headers = {\r\n    headers: {\r\n        'Content-Type': string,\r\n        authorization: string,\r\n    }\r\n}\r\n\r\nconst handleResponse = (res: any) => {\r\n    if (res.ok) {\r\n        return res.json();\r\n    }\r\n    return Promise.reject(res.status);\r\n}\r\n\r\nclass WeatherApi {\r\n    _url: string;\r\n    _headers: {\r\n        'Content-Type': string,\r\n    };\r\n\r\n    constructor(url: string, { headers }: Headers) {\r\n        this._url = url;\r\n        this._headers = headers;\r\n    }\r\n\r\n    getWeatherForecastOnSevenDays(coordinates: Coordinates) {\r\n        return fetch(`${this._url}?lat=${coordinates.lat}&lon=${coordinates.lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${apiKey}`, {\r\n            method: 'GET',\r\n        })\r\n            .then(handleResponse)\r\n    }\r\n\r\n    getWeatherForecastOnDateinThePast(coordinates: Coordinates, date: number) {\r\n        return fetch(`${this._url}/timemachine?lat=${coordinates.lat}&lon=${coordinates.lon}&dt=${date}&units=metric&appid=${apiKey}`, {\r\n            method: 'GET',\r\n        })\r\n            .then(handleResponse)\r\n    }\r\n}\r\n\r\nconst apiWeather = new WeatherApi(BASE_URL, {\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        authorization: apiKey,\r\n    }\r\n});\r\n\r\nexport default apiWeather;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\nimport Main from \"../Main/Main\";\nimport apiWeather from \"../../utils/WeatherApi\";\nimport { CardItem, Cards, Coordinates } from \"../../types\";\n\nfunction App() {\n  const [cardsSevenDays, setCardsSevenDays] = useState<Cards>([]);\n  const [cardDayInPast, setCardDayInPast] = useState<Cards>([]);\n  const [numberOfInitalCard, setNumberOfInitalCard] = useState<number>(0);\n  const [isRightButtonEnabled, setIsRightButtonEnabled] =\n    useState<boolean>(true);\n  const [isLeftButtonEnabled, setIsLeftButtonEnabled] =\n    useState<boolean>(false);\n  const [isFormSevenDaysSubmited, setIsFormSevenDaysSubmited] =\n    useState<boolean>(false);\n  const [isFormHistoryDaySubmited, setIsFormHistoryDaySubmited] =\n    useState<boolean>(false);\n\n  const getCoordinates = (city: string): Coordinates => {\n    let cordinates: Coordinates;\n\n    switch (city) {\n      case \"Самара\":\n        cordinates = {\n          lat: 53.195873,\n          lon: 50.100193,\n        };\n        break;\n      case \"Тольятти\":\n        cordinates = {\n          lat: 53.507836,\n          lon: 49.420393,\n        };\n        break;\n      case \"Саратов\":\n        cordinates = {\n          lat: 51.533557,\n          lon: 46.034257,\n        };\n        break;\n      case \"Казань\":\n        cordinates = {\n          lat: 55.796127,\n          lon: 49.106405,\n        };\n        break;\n      case \"Краснодар\":\n        cordinates = {\n          lat: 45.03547,\n          lon: 38.975313,\n        };\n        break;\n      default:\n        console.log(\"Нет такого города\");\n    }\n\n    return cordinates!;\n  };\n\n  const optionsData: any = {\n    day: \"numeric\",\n    month: \"short\",\n    year: \"numeric\",\n  };\n\n  function createCard(\n    date: number,\n    temperature: number,\n    iconUrl: string\n  ): CardItem {\n    const dateCard: string = new Date(date * 1000)\n      .toLocaleDateString(\"en-GB\", optionsData)\n      .toLowerCase();\n    const newCardItem: CardItem = {\n      date: dateCard,\n      temperature: Math.round(temperature),\n      iconUrl: `http://openweathermap.org/img/wn/${iconUrl}@2x.png`,\n    };\n    return newCardItem;\n  }\n\n  function getWeatherForecastOnSevenDays(city: string): any {\n    const cordinatesCity: Coordinates = getCoordinates(city);\n\n    setIsFormSevenDaysSubmited(false);\n\n    apiWeather\n      .getWeatherForecastOnSevenDays(cordinatesCity)\n      .then((data: any): void => {\n        setIsFormSevenDaysSubmited(true);\n        const newCards: Cards = data.daily.map((item: any) => {\n          return createCard(item.dt, item.temp.day, item.weather[0].icon);\n        });\n\n        setCardsSevenDays(newCards);\n        setNumberOfInitalCard(0);\n        setIsRightButtonEnabled(true);\n        setIsLeftButtonEnabled(false);\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n  }\n\n  function getHistoricalWeatherData(city: string, date: number) {\n    const coordinatesCity: Coordinates = getCoordinates(city);\n\n    setIsFormHistoryDaySubmited(false);\n\n    apiWeather\n      .getWeatherForecastOnDateinThePast(coordinatesCity, date)\n      .then((data) => {\n        setIsFormHistoryDaySubmited(true);\n        const newCard: CardItem = createCard(\n          data.current.dt,\n          data.current.temp,\n          data.current.weather[0].icon\n        );\n        setCardDayInPast([newCard, ...cardDayInPast]);\n        setNumberOfInitalCard(0);\n      })\n      .catch((err: any) => {\n        console.log(err);\n      });\n  }\n\n  function handleButtonRight(): void {\n    if (numberOfInitalCard < cardsSevenDays.length - 3) {\n      setNumberOfInitalCard(numberOfInitalCard + 1);\n    }\n  }\n\n  function handleButtonLeft(): void {\n    if (numberOfInitalCard !== 0) {\n      setNumberOfInitalCard(numberOfInitalCard - 1);\n    }\n  }\n\n  useEffect(() => {\n    if (numberOfInitalCard === cardsSevenDays.length - 3) {\n      setIsRightButtonEnabled(false);\n    }\n    if (numberOfInitalCard === cardsSevenDays.length - 4) {\n      setIsRightButtonEnabled(true);\n    }\n    if (numberOfInitalCard === 1) {\n      setIsLeftButtonEnabled(true);\n    }\n    if (numberOfInitalCard === 0) {\n      setIsLeftButtonEnabled(false);\n    }\n  }, [cardsSevenDays.length, numberOfInitalCard]);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Main\n        cardsSevenDays={cardsSevenDays}\n        cardDayInPast={cardDayInPast}\n        getWeatherForecastOnSevenDays={getWeatherForecastOnSevenDays}\n        handleButtonRight={handleButtonRight}\n        handleButtonLeft={handleButtonLeft}\n        numberOfInitalCard={numberOfInitalCard}\n        isLeftButtonEnabled={isLeftButtonEnabled}\n        isRightButtonEnabled={isRightButtonEnabled}\n        getHistoricalWeatherData={getHistoricalWeatherData}\n        isFormSevenDaysSubmited={isFormSevenDaysSubmited}\n        isFormHistoryDaySubmited={isFormHistoryDaySubmited}\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}