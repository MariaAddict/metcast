{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","images/Academy-Weather-bg160.svg","components/InfoBlock/InfoBlock.tsx","components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchForecast/SearchForecast.tsx","components/Main/Main.tsx","utils/WeatherApi.ts","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Footer","InfoBlock","src","cloudImage","alt","Card","props","temperatureCard","useMemo","card","temperature","String","style","backgroundImage","iconUrl","backgroundSize","forecast","date","CardList","currentWidth","window","innerWidth","type","isLeftButtonEnabled","onClick","showPreviousCard","disabled","cards","map","i","slice","numberOfInitalCard","length","isRightButtonEnabled","showNextCard","SearchForecast","useState","city","setCity","setDate","form","React","createRef","ref","name","onKeyPress","event","key","getWeatherForecastOnSevenDays","newDate","Date","dateInThePast","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getHistoricalWeatherData","required","onChange","target","value","console","log","hidden","selected","placeholder","isFormSevenDaysSubmited","isFormHistoryDaySubmited","Main","cardsSevenDays","cardDayInPast","apiKey","handleResponse","res","ok","json","Promise","reject","status","apiWeather","url","headers","_url","_headers","this","coordinates","fetch","lat","lon","method","then","authorization","App","setCardsSevenDays","setCardDayInPast","setNumberOfInitalCard","setIsRightButtonEnabled","setIsLeftButtonEnabled","setIsFormSevenDaysSubmited","setIsFormHistoryDaySubmited","getCoordinates","cordinates","optionsData","day","month","year","createCard","toLocaleDateString","toLowerCase","changeDateFormat","Math","round","useEffect","cordinatesCity","data","newCards","daily","item","dt","temp","weather","icon","catch","err","coordinatesCity","getWeatherForecastOnDateinThePast","newCard","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88caa0bf.chunk.js","sourcesContent":["import './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n      <header className=\"header\">\r\n        <h1 className=\"header__title\">Weather<br/><span className=\"header__title-part\">forecast</span></h1>\r\n      </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import './Footer.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n      <footer className=\"footer\">\r\n        <p className=\"footer__discription\">C Любовью от Mercury Development</p>\r\n      </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/Academy-Weather-bg160.1a743710.svg\";","import \"./InfoBlock.css\";\r\nimport cloudImage from \"../../images/Academy-Weather-bg160.svg\";\r\n\r\nfunction InfoBlock() {\r\n  return (\r\n    <div className=\"info\">\r\n      <img\r\n        src={cloudImage}\r\n        alt=\"Облако\"\r\n        className=\"info__image\"\r\n      />\r\n      <p className=\"info__description\">\r\n        Fill in all the fields and the weather will be displayed\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoBlock;","import {useMemo} from 'react';\r\nimport './Card.css';\r\nimport { CardItem } from '../../types';\r\n\r\ninterface CardProps {\r\n    key: number,\r\n    card: CardItem,\r\n    forecast: string,\r\n}\r\n\r\nfunction Card(props: CardProps) {\r\n    const temperatureCard: string = useMemo(() => {\r\n        if (props.card.temperature > 0) {\r\n            return \"+\" + props.card.temperature;\r\n        } else  if (props.card.temperature < 0) {\r\n            return \"-\" + props.card.temperature;\r\n        } else {\r\n            return String(props.card.temperature);\r\n        }\r\n    }, [props.card]);\r\n    \r\n    return (\r\n        <li className=\"cards__item\" style={ {backgroundImage: `url(${props.card.iconUrl})`, backgroundSize: props.forecast === '7days' ? '120px 120px' : '160px 160px'}}>\r\n            <p className=\"cards__date\">{props.card.date}</p>\r\n            <p className=\"cards__temperature\">{temperatureCard!}&deg;</p>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Card;","import \"./CardList.css\";\r\nimport Card from \"../Card/Card\";\r\nimport { Cards } from \"../../types\";\r\n\r\ninterface CardListProps {\r\n  cards: Cards;\r\n  forecast: string;\r\n  showNextCard?(): void;\r\n  showPreviousCard?(): void;\r\n  numberOfInitalCard?: number;\r\n  isLeftButtonEnabled?: boolean;\r\n  isRightButtonEnabled?: boolean;\r\n}\r\n\r\nfunction CardList(props: CardListProps) {\r\n\r\n  let currentWidth: any = window.innerWidth;\r\n\r\n  return (\r\n    <div className=\"card-list-block\">\r\n      {props.forecast === \"7days\" && (\r\n        <button\r\n          type=\"button\"\r\n          className={`card-list-block__button ${\r\n            props.isLeftButtonEnabled ? \"\" : \"card-list-block__button_disabled\"\r\n          } card-list-block__button_direction_left`}\r\n          onClick={props.showPreviousCard}\r\n          disabled={!props.isLeftButtonEnabled}\r\n        ></button>\r\n      )}\r\n      <ul className=\"cards\">\r\n        {props.cards\r\n          .map((card, i) => (\r\n            <Card key={i} card={card} forecast={props.forecast} />\r\n          ))\r\n          .slice(props.numberOfInitalCard, props.forecast==='day' ? 1 : currentWidth <= 540 ? props.cards.length : props.numberOfInitalCard! + 3)}\r\n      </ul>\r\n      {props.forecast === \"7days\" && (\r\n        <button\r\n          type=\"button\"\r\n          className={`card-list-block__button ${\r\n            props.isRightButtonEnabled ? \"\" : \"card-list-block__button_disabled\"\r\n          } card-list-block__button_direction_right`}\r\n          onClick={props.showNextCard}\r\n          disabled={!props.isRightButtonEnabled}\r\n        ></button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import \"./SearchForecast.css\";\r\nimport React, { useState } from \"react\";\r\nimport InfoBlock from \"../InfoBlock/InfoBlock\";\r\nimport CardList from \"../CardList/CardList\";\r\nimport { Cards } from \"../../types\";\r\n\r\ninterface SearchForecastProps {\r\n  forecast: string;\r\n  cards: Cards;\r\n  getWeatherForecastOnSevenDays?(city: string): void;\r\n  showNextCard?(): void;\r\n  showPreviousCard?(): void;\r\n  numberOfInitalCard?: number;\r\n  isLeftButtonEnabled?: boolean;\r\n  isRightButtonEnabled?: boolean;\r\n  getHistoricalWeatherData?(city: string, date: number): void;\r\n  isFormSevenDaysSubmited?: boolean;\r\n  isFormHistoryDaySubmited?: boolean;\r\n}\r\n\r\nfunction SearchForecast(props: SearchForecastProps) {\r\n  const [city, setCity] = useState<string>(\"\");\r\n  const [date, setDate] = useState<string>(\"\");\r\n  const form = React.createRef<HTMLFormElement>();\r\n\r\n  function setValueSelect(\r\n    event: React.ChangeEvent<HTMLSelectElement>\r\n  ): void {\r\n    setCity(event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  function setValueDate(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    setDate(event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  function handleKeyEnter(event: React.KeyboardEvent): void {\r\n    if (event.key === \"Enter\") {\r\n      if (props.forecast === \"7days\" && city !== \"\") {\r\n        props.getWeatherForecastOnSevenDays!(city);\r\n      } else if (city !== \"\" && date !== \"\") {\r\n        const newDate = new Date(date);\r\n        const dateInThePast =\r\n          Date.UTC(\r\n            newDate.getUTCFullYear(),\r\n            newDate.getUTCMonth(),\r\n            newDate.getUTCDate(),\r\n            newDate.getUTCHours(),\r\n            newDate.getUTCMinutes(),\r\n            newDate.getUTCSeconds()\r\n          ) / 1000;\r\n        props.getHistoricalWeatherData!(city, dateInThePast);\r\n      }\r\n    }\r\n  }\r\n\r\n  // function onChange(e: any): void{\r\n  //   console.log(\"event: \", e.target.value);\r\n  // }\r\n\r\n\r\n  return (\r\n    <div className=\"forecast\">\r\n      <h3 className=\"forecast__title\">\r\n        {props.forecast === \"7days\"\r\n          ? \"7 Days Forecast\"\r\n          : \"Forecast for a Date in the Past\"}\r\n      </h3>\r\n      <form\r\n        ref={form}\r\n        className=\"forecast__form\"\r\n        name={props.forecast}\r\n        onKeyPress={handleKeyEnter}\r\n        // onChange = {onChange}\r\n      >\r\n        <select\r\n          className=\"forecast__input\"\r\n          required\r\n          onChange={setValueSelect}\r\n          value={city}\r\n          name=\"city\"\r\n        >\r\n          <option hidden disabled selected>\r\n            Select city\r\n          </option>\r\n          <option className=\"forecast__select-item\">Самара</option>\r\n          <option className=\"forecast__select-item\">Тольятти</option>\r\n          <option className=\"forecast__select-item\">Саратов</option>\r\n          <option className=\"forecast__select-item\">Казань</option>\r\n          <option className=\"forecast__select-item\">Краснодар</option>\r\n        </select>\r\n        {props.forecast === \"day\" && (\r\n          <input\r\n            type=\"date\"\r\n            className=\"forecast__input forecast__input_type_data\"\r\n            placeholder=\"Select date\"\r\n            required\r\n            onChange={setValueDate}\r\n            value={date}\r\n            name=\"date\"\r\n          ></input>\r\n        )}\r\n      </form>\r\n      {((props.forecast === \"7days\" && !props.isFormSevenDaysSubmited) ||\r\n        (props.forecast === \"day\" && !props.isFormHistoryDaySubmited)) && (\r\n        <InfoBlock />\r\n      )}\r\n      {((props.forecast === \"7days\" && props.isFormSevenDaysSubmited) ||\r\n        (props.forecast === \"day\" && props.isFormHistoryDaySubmited)) && (\r\n        <CardList\r\n          cards={props.cards}\r\n          forecast={props.forecast}\r\n          showNextCard={props.showNextCard}\r\n          showPreviousCard={props.showPreviousCard}\r\n          numberOfInitalCard={props.numberOfInitalCard}\r\n          isLeftButtonEnabled={props.isLeftButtonEnabled}\r\n          isRightButtonEnabled={props.isRightButtonEnabled}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchForecast;\r\n","import \"./Main.css\";\r\nimport SearchForecast from \"../SearchForecast/SearchForecast\";\r\nimport { Cards } from \"../../types\";\r\n\r\ntype MainProps = {\r\n  cardsSevenDays: Cards;\r\n  cardDayInPast: Cards;\r\n  getWeatherForecastOnSevenDays(city: string): void;\r\n  showNextCard(): void;\r\n  showPreviousCard(): void;\r\n  numberOfInitalCard: number;\r\n  isLeftButtonEnabled: boolean;\r\n  isRightButtonEnabled: boolean;\r\n  getHistoricalWeatherData(city: string, date: number): void;\r\n  isFormSevenDaysSubmited: boolean;\r\n  isFormHistoryDaySubmited: boolean;\r\n};\r\n\r\nfunction Main(props: MainProps) {\r\n  return (\r\n    <main className=\"main\">\r\n      <SearchForecast\r\n        forecast=\"7days\"\r\n        cards={props.cardsSevenDays}\r\n        getWeatherForecastOnSevenDays={props.getWeatherForecastOnSevenDays}\r\n        showNextCard={props.showNextCard}\r\n        showPreviousCard={props.showPreviousCard}\r\n        numberOfInitalCard={props.numberOfInitalCard}\r\n        isLeftButtonEnabled={props.isLeftButtonEnabled}\r\n        isRightButtonEnabled={props.isRightButtonEnabled}\r\n        isFormSevenDaysSubmited={props.isFormSevenDaysSubmited}\r\n      />\r\n      <SearchForecast\r\n        forecast=\"day\"\r\n        cards={props.cardDayInPast}\r\n        getHistoricalWeatherData={props.getHistoricalWeatherData}\r\n        isFormHistoryDaySubmited={props.isFormHistoryDaySubmited}\r\n      />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import { Coordinates } from '../types';\r\n\r\nconst apiKey: string = \"4a12c294eb4c1a76d3ce99b78c9b8b4a\";\r\nconst BASE_URL: string = \"https://api.openweathermap.org/data/2.5/onecall\";\r\n\r\ntype Headers = {\r\n    headers: {\r\n        'Content-Type': string,\r\n        authorization: string,\r\n    }\r\n}\r\n\r\nconst handleResponse = (res: any) => {\r\n    if (res.ok) {\r\n        return res.json();\r\n    }\r\n    return Promise.reject(res.status);\r\n}\r\n\r\nclass WeatherApi {\r\n    _url: string;\r\n    _headers: {\r\n        'Content-Type': string,\r\n    };\r\n\r\n    constructor(url: string, { headers }: Headers) {\r\n        this._url = url;\r\n        this._headers = headers;\r\n    }\r\n\r\n    getWeatherForecastOnSevenDays(coordinates: Coordinates) {\r\n        return fetch(`${this._url}?lat=${coordinates.lat}&lon=${coordinates.lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${apiKey}`, {\r\n            method: 'GET',\r\n        })\r\n            .then(handleResponse)\r\n    }\r\n\r\n    getWeatherForecastOnDateinThePast(coordinates: Coordinates, date: number) {\r\n        return fetch(`${this._url}/timemachine?lat=${coordinates.lat}&lon=${coordinates.lon}&dt=${date}&units=metric&appid=${apiKey}`, {\r\n            method: 'GET',\r\n        })\r\n            .then(handleResponse)\r\n    }\r\n}\r\n\r\nconst apiWeather = new WeatherApi(BASE_URL, {\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        authorization: apiKey,\r\n    }\r\n});\r\n\r\nexport default apiWeather;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"../Header/Header\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport Main from \"../Main/Main\";\r\nimport apiWeather from \"../../utils/WeatherApi\";\r\nimport { CardItem, Cards, Coordinates } from \"../../types\";\r\n\r\nfunction App() {\r\n  const [cardsSevenDays, setCardsSevenDays] = useState<Cards>([]);\r\n  const [cardDayInPast, setCardDayInPast] = useState<Cards>([]);\r\n  const [numberOfInitalCard, setNumberOfInitalCard] = useState<number>(0);\r\n  const [isRightButtonEnabled, setIsRightButtonEnabled] =\r\n    useState<boolean>(true);\r\n  const [isLeftButtonEnabled, setIsLeftButtonEnabled] =\r\n    useState<boolean>(false);\r\n  const [isFormSevenDaysSubmited, setIsFormSevenDaysSubmited] =\r\n    useState<boolean>(false);\r\n  const [isFormHistoryDaySubmited, setIsFormHistoryDaySubmited] =\r\n    useState<boolean>(false);\r\n\r\n\r\n    //\"homepage\": \"https://mariaaddict.github.io/metcast/,\r\n  const getCoordinates = (city: string): Coordinates => {\r\n    let cordinates: Coordinates;\r\n\r\n    switch (city) {\r\n      case \"Самара\":\r\n        cordinates = {\r\n          lat: 53.195873,\r\n          lon: 50.100193,\r\n        };\r\n        break;\r\n      case \"Тольятти\":\r\n        cordinates = {\r\n          lat: 53.507836,\r\n          lon: 49.420393,\r\n        };\r\n        break;\r\n      case \"Саратов\":\r\n        cordinates = {\r\n          lat: 51.533557,\r\n          lon: 46.034257,\r\n        };\r\n        break;\r\n      case \"Казань\":\r\n        cordinates = {\r\n          lat: 55.796127,\r\n          lon: 49.106405,\r\n        };\r\n        break;\r\n      case \"Краснодар\":\r\n        cordinates = {\r\n          lat: 45.03547,\r\n          lon: 38.975313,\r\n        };\r\n        break;\r\n      default:\r\n        console.log(\"Нет такого города\");\r\n    }\r\n\r\n    return cordinates!;\r\n  };\r\n\r\n  const optionsData: any = {\r\n    day: \"numeric\",\r\n    month: \"short\",\r\n    year: \"numeric\",\r\n  };\r\n\r\n  function changeDateFormat(date: number): string {\r\n    return new Date(date * 1000)\r\n      .toLocaleDateString(\"en-GB\", optionsData)\r\n      .toLowerCase();\r\n  }\r\n\r\n  function createCard(\r\n    date: number,\r\n    temperature: number,\r\n    iconUrl: string\r\n  ): CardItem {\r\n    const dateCard: string = changeDateFormat(date);\r\n    const newCardItem: CardItem = {\r\n      date: dateCard,\r\n      temperature: Math.round(temperature),\r\n      iconUrl: `http://openweathermap.org/img/wn/${iconUrl}@2x.png`,\r\n    };\r\n    return newCardItem;\r\n  }\r\n\r\n  function getWeatherForecastOnSevenDays(city: string): any {\r\n    const cordinatesCity: Coordinates = getCoordinates(city);\r\n\r\n    setIsFormSevenDaysSubmited(false);\r\n\r\n    apiWeather\r\n      .getWeatherForecastOnSevenDays(cordinatesCity)\r\n      .then((data: any): void => {\r\n        setIsFormSevenDaysSubmited(true);\r\n        const newCards: Cards = data.daily.map((item: any) => {\r\n          return createCard(item.dt, item.temp.day, item.weather[0].icon);\r\n        });\r\n\r\n        setCardsSevenDays(newCards);\r\n        setNumberOfInitalCard(0);\r\n        setIsRightButtonEnabled(true);\r\n        setIsLeftButtonEnabled(false);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  function getHistoricalWeatherData(city: string, date: number) {\r\n    const coordinatesCity: Coordinates = getCoordinates(city);\r\n\r\n    setIsFormHistoryDaySubmited(false);\r\n\r\n    apiWeather\r\n      .getWeatherForecastOnDateinThePast(coordinatesCity, date)\r\n      .then((data) => {\r\n        setIsFormHistoryDaySubmited(true);\r\n        const newCard: CardItem = createCard(\r\n          data.current.dt,\r\n          data.current.temp,\r\n          data.current.weather[0].icon\r\n        );\r\n        setCardDayInPast([newCard, ...cardDayInPast]);\r\n        setNumberOfInitalCard(0);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  function showNextCard(): void {\r\n    if (numberOfInitalCard < cardsSevenDays.length - 3) {\r\n      setNumberOfInitalCard(numberOfInitalCard + 1);\r\n    }\r\n  }\r\n\r\n  function showPreviousCard(): void {\r\n    if (numberOfInitalCard !== 0) {\r\n      setNumberOfInitalCard(numberOfInitalCard - 1);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (numberOfInitalCard === cardsSevenDays.length - 3) {\r\n      setIsRightButtonEnabled(false);\r\n    }\r\n    if (numberOfInitalCard === cardsSevenDays.length - 4) {\r\n      setIsRightButtonEnabled(true);\r\n    }\r\n    if (numberOfInitalCard === 1) {\r\n      setIsLeftButtonEnabled(true);\r\n    }\r\n    if (numberOfInitalCard === 0) {\r\n      setIsLeftButtonEnabled(false);\r\n    }\r\n  }, [cardsSevenDays.length, numberOfInitalCard]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <Main\r\n        cardsSevenDays={cardsSevenDays}\r\n        cardDayInPast={cardDayInPast}\r\n        getWeatherForecastOnSevenDays={getWeatherForecastOnSevenDays}\r\n        showNextCard={showNextCard}\r\n        showPreviousCard={showPreviousCard}\r\n        numberOfInitalCard={numberOfInitalCard}\r\n        isLeftButtonEnabled={isLeftButtonEnabled}\r\n        isRightButtonEnabled={isRightButtonEnabled}\r\n        getHistoricalWeatherData={getHistoricalWeatherData}\r\n        isFormSevenDaysSubmited={isFormSevenDaysSubmited}\r\n        isFormHistoryDaySubmited={isFormHistoryDaySubmited}\r\n      />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}